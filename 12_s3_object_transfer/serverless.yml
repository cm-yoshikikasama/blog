service: s3-object-existence ## Cloudformationのstack nameを設定
frameworkVersion: '3'
provider: ## providorを指定
  name: aws
  runtime: python3.9
  stage: ${env:STAGE, 'dev'}
  lambdaHashingVersion: 20201221
  region: us-east-1
  iam:
    role: ${cf:cm-kasama-lambda-${self:provider.stage}-role.CmKasamaLambdaRole}
package: ## lambda上にデプロイする際に除外するファイルを!で指定
  patterns:
    - "!.vscode/**"
    - "!.git/**"
    - "!.gitignore"
    - "!.serverless"
    - "!.serverless/**"
    - "!README.md"
    - "!deploy-shell/**"
    - "!package*.json"
    - "!requirements.txt"
    - "!node_modules/**"
    - "!__pycache__"
    - "!yarn.lock"
    - "!tests"
    - "!lambda_role.yml"
functions:
  s3_object_existence:
    name: ${self:service}-${self:provider.stage}-handler  ## lambda関数名
    handler: handler.handler ## 実行される関数を指定
    memorySize: 128 ## lambdaのメモリサイズ
    timeout: 300 ## lambdaのタイムアウト時間
    layers: ## lambdaに紐づくレイヤーを指定
      - Ref: PythonRequirementsLambdaLayer ## Layerを参照
    environment:
      ENV: ${self:provider.stage}
 # カスタム変数が定義可能
custom:
  pythonRequirements:
    dockerizePip: false ## python以外で作られているライブラリを使用する時はtrueに
    usePipenv: false ## Pipenvを使用する場合にtrueに
    layer: true ## ライブラリからLambda Layerを作成するオプション
    useDownloadCache: true ## pip がパッケージをコンパイルするために必要なダウンロードをキャッシュするダウンロード キャッシュ
    useStaticCache: true ## requirements.txtのすべてをコンパイルした後に pip の出力をキャッシュする静的キャッシュ
plugins:
  - serverless-python-requirements
